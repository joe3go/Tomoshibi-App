 Goal:
Enhance my existing Japanese language learning site by adding furigana display and word definition lookup using a Node.js-compatible, React frontend solution — without breaking any current features (including wanakana-based romaji conversion and hiragana input).

✅ Requirements Summary
Keep Existing Functionality

Do not remove or break any existing behavior (e.g., wanakana's input conversion or romaji toggle).

Ensure all chat, text input, and UI components continue working as-is.

Existing wanakana import and usage should stay intact:

ts
Copy
Edit
import { bind, unbind, toHiragana } from "wanakana";
Furigana Display

Add a new FuriganaText component that:

Uses kuroshiro + kuromoji for accurate furigana parsing.

Displays Japanese sentences with ruby/furigana above kanji.

Supports a toggle to hide/show furigana.

Does not double-parse or introduce layout issues.

Word Definition Popups

On hover or click on individual Japanese words:

Show a popup with definition and reading.

Use the Jisho API for definitions.

Only one popup visible at a time.

Component Structure

FuriganaText.tsx

Accepts text, showFurigana, onToggle, enableWordLookup

Parses text and renders with <ruby> + <rt>

WordDefinitionPopup.tsx

Clean popup component that appears near the clicked word.

Styling

Use TailwindCSS with clean, concise class names (e.g., jp-text, popup, ruby-toggle)

Ensure mobile responsiveness

Ruby text should appear clearly using:

css
Copy
Edit
font-family: 'Noto Sans JP', sans-serif;
UX Notes

Popup appears on hover and locks on click.

Clicking anywhere else closes it.

Cache parsed furigana to avoid redundant work.

Performance

Avoid re-rendering unless the input text changes.

Parse once per update and cache results internally.

Install Packages

bash
Copy
Edit
npm install kuroshiro kuroshiro-analyzer-kuromoji
🧪 Test Sentence
Please test this:

ts
Copy
Edit
"私はアニメを見るのが好きです。特に「スパイファミリー」が面白いです。"
Expect:

Furigana shows above each kanji

Clicking “見る” shows: みる (meaning: "to watch")

✅ Final Notes
Ensure no breakage to existing site layout or state logic.

Integrate this modularly into the existing React component system.

Maintain wanakana-based romaji-to-hiragana conversion.

Let me know if you want the actual component code included directly in this prompt too.