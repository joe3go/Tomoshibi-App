 Fix & Implementation Guide: Persistent Login State & Routing

âœ¨ Key Fixes Needed

Auth State Hydration - Load stored tokens on app initialization

Protected Routing - Block unauthorized dashboard access

Token Validation - Verify tokens against backend on page reload

ðŸ”§ Code Changes Required
1. Client Routes (src/App.tsx)

typescript

// Add auth-aware routing
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';

export default function App() {
  const { user, loading } = useAuth();

  if (loading) return <LoadingScreen />;

  return (
    <Routes>
      <Route path="/login" element={!user ? <Login /> : <Navigate to="/dashboard" />} />
      <Route path="/dashboard" element={user ? <Dashboard /> : <Navigate to="/login" />} />
      <Route path="*" element={<Navigate to={user ? "/dashboard" : "/login"} />} />
    </Routes>
  );
}
2. Auth Hook Improvements (src/hooks/useAuth.ts)

typescript

// Add persistent validation
export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const verifyToken = async () => {
      const savedToken = localStorage.getItem('authToken');
      if (!savedToken) {
        setLoading(false);
        return;
      }

      try {
        const { data: { user } } = await supabase.auth.getUser(savedToken);
        setUser(user);
      } catch (error) {
        localStorage.removeItem('authToken');
        console.error("Invalid token:", error);
      } finally {
        setLoading(false);
      }
    };

    verifyToken();
  }, []);

  return { user, loading };
}
ðŸ›  Critical Server-Side Fix
Token Verification Endpoint (server/routes.ts)

typescript

// Add explicit token validation route
app.get('/api/auth/verify', async (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) return res.status(401).json({ valid: false });

  const { data: { user }, error } = await supabase.auth.getUser(token);
  res.status(error ? 401 : 200).json({ valid: !!user });
});
ðŸ’» IMPORTANT: Execute in Replit Shell
bash

# Clean install and reboot
rm -rf node_modules/ .cache/ dist/
npm install
npm run build && npm start
âœ… Post-Implementation Checks

Browser DevTools â†’ Network Tab:

Verify /api/auth/verify call on page reload (200 OK)
Network tab verification example

Test Full Flow:

bash

curl -X POST "$REPLIT_PUBLIC_URL/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"email":"test@demo.com","password":"ValidPass123!"}' \
  && open $REPLIT_PUBLIC_URL/dashboard
