    Prompt to Replit AI Builder:

We’ve updated the Supabase schema to support group conversations with reusable prompt templates. Your job is to implement full support for this feature **without breaking any existing solo conversation flows**.

---

🧱 1. Tables to Support (Mock in Replit)

Since Replit cannot access Supabase directly, mock these:

- `conversation_templates`: defines preset templates (e.g. "Anime Club", "Study Group")
  ```ts
  interface ConversationTemplate {
    id: string;
    name: string; // e.g. "Anime Club"
    description: string; // e.g. "Chat with Ren and Keiko about anime"
  }

    conversation_prompts: linked to a template via template_id. Each has:

    interface ConversationPrompt {
      id: string;
      template_id: string;
      role: 'system' | 'user' | 'assistant';
      content: string; // e.g. "こんにちは、{user_name}さん！"
      variables?: Record<string, string>; // optional tokens to replace
    }

⚙️ 2. Functional Requirements

A. Template Selection + Creation

    Add a new UI section: “Practice Groups”

    User can select from templates (fetched from conversation_templates)

    When selected:

        Create a new conversation with:

            mode: "group"

            template_id: selected template

            user_id: current user

B. Participant Setup

    Automatically insert predefined conversation_participants based on template

        E.g. “Anime Club” includes Ren and Keiko with role member, ordered 1 and 2

    Use mock function:

    async function getParticipantsForTemplate(templateId: string): Promise<Participant[]>

C. Dynamic Prompt Setup

    For each conversation_prompt, replace {variables} using this utility:

    function injectPromptVariables(content: string, variables: Record<string, string>): string

    Send system role prompts to the LLM to initialize context

    Rotate assistant replies between participants based on their order

D. Typing Simulation

    Show "Ren is typing…" or "Satoshi is typing…" in chat UI

    Use setTimeout() or delay queues to stagger simulated replies

🎯 3. Best Practice Conventions

Follow these throughout:

    ✅ Component Naming

        Use short, clear, descriptive names:
        GroupChatLauncher, PromptInjector, TemplateSelector, TypingIndicator

    ✅ Code Style

        Use clear separation of concerns: logic, rendering, and API mocking

        Avoid code duplication between group and solo chat

        Abstract common logic (e.g. useConversationContext())

    ✅ Mocking

        Use typed mocks for Supabase data (not hardcoded strings everywhere)

        Use fallback error handling when templates or prompts aren’t found

    ✅ UI Safety

        Do NOT alter or break any existing solo chat UI or API interactions

        Ensure conditional rendering keeps solo mode clean and untouched

📌 Reminder: This feature introduces group AI conversations where users chat with multiple AI personas (e.g. Ren, Keiko, Satoshi) using Japanese. Each group should feel like a realistic social setting — simulate naturally, not like a classroom.


---

Let me know if you want seed mock data for testing `Anime Club` and `Japanese Study Group` — I can write that next.

