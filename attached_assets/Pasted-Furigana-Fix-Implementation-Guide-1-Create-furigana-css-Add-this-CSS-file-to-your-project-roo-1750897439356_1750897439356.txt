Furigana Fix Implementation Guide

1. Create furigana.css

Add this CSS file to your project root:

css

/* furigana.css */
@layer components {
  .furigana-wrapper {
    @apply leading-[1.8] font-japanese;
  }

  ruby {
    ruby-position: over;
    ruby-align: center;
  }

  rt {
    @apply text-[0.6em] font-normal tracking-[0.05em] !text-muted-foreground 
           font-japanese !visibility-visible !opacity-100 origin-bottom;
    transform: translateY(-0.25em);
    line-height: 1.2 !important;
  }

  /* Safari/WebKit Fix */
  @supports (-webkit-touch-callout: none) {
    rt {
      -webkit-text-combine: horizontal;
      transform: translateY(-0.35em) scale(0.9);
    }
  }

  /* Firefox Fix */
  @-moz-document url-prefix() {
    rt {
      font-size: 0.55em !important;
      transform: translateY(-0.45em);
    }
  }

  /* Chromium Edge Fix */
  @supports (-ms-ime-align: auto) {
    rt {
      transform: translateY(-0.2em);
    }
  }
}
2. Update FuriganaText.tsx

Modify your component structure:

typescript

export default function FuriganaText({ /* props */ }: FuriganaTextProps) {
  return (
    <div className="furigana-wrapper">
      {/* Your existing toggle button */}
      
      <div className="jt-body">
        {tokens.map((t, i) => (
          <>
            {showFurigana ? (
              <ruby
                key={i}
                className="inline-block mr-0.5 align-top hover:bg-blue-100"
                onClick={(e) => handleClick(e, t)}
              >
                {t.kanji}
                <rt className="!text-blue-600">{t.reading}</rt>
              </ruby>
            ) : (
              // Your existing kanji display
            )}
          </>
        ))}
      </div>
    </div>
  );
}
3. Modify Tailwind Config

Update tailwind.config.ts:

typescript

// Add to plugin section
plugins: [
  // ...
  function ({ addBase }) {
    addBase({
      '@font-face': [
        {
          fontFamily: 'Noto Sans JP',
          src: 'url(/fonts/NotoSansJP-Regular.woff2) format("woff2")',
          fontWeight: 400,
        },
        {
          fontFamily: 'Noto Sans JP',
          src: 'url(/fonts/NotoSansJP-Medium.woff2) format("woff2")',
          fontWeight: 500,
        },
      ],
    });
  },
]
4. Font Setup Verification

Create file verification component:

typescript

function FontTest() {
  return (
    <div className="p-4 bg-card border border-destructive rounded-lg">
      <ruby className="text-2xl">
        漢字<rt className="!text-destructive">かんじ</rt>
      </ruby>
      <div className="mt-2 text-sm text-muted-foreground">
        Red furigana should appear above the kanji
      </div>
    </div>
  );
}
Implementation Checklist


Place font files in /public/fonts/

Import furigana.css in your root layout

Replace all existing ruby-related CSS with new implementation

Verify via <FontTest /> component

Key Fix Mechanisms


Atomic font-family declaration hierarchy

Browser-specific alignment overrides

Fixed line-height relationships

Visibility enforcement through !important

Decoupled font loading strategy

This implementation maintains all avatar displays, bubble colors, and conversation features while implementing reliable ruby text rendering.