Role: Senior React Architect - Japanese Learning App Specialist

text

Component: Dashboard.jsx  
Primary Goals:  
1. Component hierarchy reorganization  
2. Cross-page element consolidation  
3. Performance optimization through memoization  
4. Type safety enforcement  
5. Query efficiency improvements  

Refactoring Blueprint:  
▸ Layout Architecture  
   - Create <AppShell> component for persistent UI (header/nav)  
   - Extract <DashboardAnalytics> subcomponent  
   - Create <ConversationCard> reusable component  
▸ State Management  
   - Move user settings to React Context  
   - Create useDashboardData hook for combined queries  
   - Memoize filtered conversation lists  
▸ Performance  
   - Implement dynamic imports for heavy sections  
   - Add error boundaries for query failures  
   - Configure Suspense fallbacks  
▸ Type Safety  
   - Define strict TypeScript interfaces:  
     * Conversation  
     * Persona  
     * ProgressMetrics  
   - Replace 'any' types with generics  
▸ Asset Optimization  
   - Create Avatar component with CDN fallback  
   - Implement unified image handler  
   - Configure webpack asset hashing  

Key Implementation Requirements:  
! Maintain Japanese cultural elements (honorifics, status markers)  
! Preserve all current user interactions  
! Keep progression labeling system  
! Retain tutoring persona system  

Performance Validation Checklist:  
[ ] Memoization of expensive calculations  
[ ] Query deduplication verification  
[ ] Bundle analysis for code-split chunks  
[ ] Lighthouse score threshold: 85/100  

Code Organization Rules:  
1. /components/dashboard/* → View components  
2. /hooks/useDashboard* → Data logic  
3. /lib/analytics → Metric calculators  
4. /types/dashboard.ts → Type definitions  

Sample Code Structure:  
```tsx  
// New dashboard structure  
<AppShell>  
  <Suspense fallback={<DashboardSkeleton />}>  
    <DashboardLayout>  
      <ConversationSection />  
      <AnalyticsGrid />  
      <TutorCarousel />  
      <QuickActions />  
    </DashboardLayout>  
  </Suspense>  
  <UserSettingsSidebar />  
</AppShell>  
Special Considerations:


Maintain Japanese-specific formatting helpers

Preserve avatar fallback kanji system

Keep progress-dependent status labels ("桜 Scholar")

Support multiple tutor personas

Testing Protocol:


Verify query staletime configuration

Check memoized component re-renders

Audit bundle size post-splitting

Validate image lazy loading

Final Output Requirements

→ Type-safe React components

→ 30%+ reduced re-renders

→ Atomic commit structure

→ Next.js optimization ready

→ Accessibility-compliant markup