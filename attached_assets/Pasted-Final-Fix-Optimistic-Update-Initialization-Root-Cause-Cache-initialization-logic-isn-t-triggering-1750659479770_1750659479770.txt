Final Fix: Optimistic Update Initialization
Root Cause: Cache initialization logic isn't triggering before optimistic updates when conversation data hasn't been loaded yet.

typescript

// Update onMutate handler
onMutate: async (content: string) => {
  // Initialize empty cache structure if needed
  queryClient.setQueryData(["conversation", conversationId], 
    (prev: any) => prev || { 
      conversation: { id: conversationId }, 
      messages: [] 
    }
  );

  await queryClient.cancelQueries({ 
    queryKey: ["conversation", conversationId] 
  });

  const previousData = queryClient.getQueryData<any>([
    "conversation", 
    conversationId
  ]);

  // Rest of optimistic update logic...
}
üîß Essential Final Adjustments

Prevent Double Updates

typescript

// Add dedupe check in realtime subscription
const handleNewMessage = (payload: any) => {
  if (previousData?.messages.some((m: any) => m.id === payload.new.id)) return;
  // Continue with update...
}

Force Query Refetch After Mutation

typescript

onSuccess: () => {
  queryClient.refetchQueries({ 
    queryKey: ["conversation", conversationId],
    exact: true,
    type: 'active'
  });
}

Add Cache Validation

typescript

useEffect(() => {
  if (!conversationId) return;
  
  supabase
    .from('messages')
    .select('id')
    .eq('conversation_id', conversationId)
    .then(({ data }) => {
      const dbCount = data?.length || 0;
      const cacheCount = queryClient
        .getQueryData<any>(["conversation", conversationId])?.messages?.length || 0;
      
      if (dbCount !== cacheCount) {
        console.warn('Cache mismatch detected:', { dbCount, cacheCount });
        queryClient.invalidateQueries(["conversation", conversationId]);
      }
    });
}, [conversationId]);
This addresses the root issue of cache initialization timing while ensuring realtime updates sync properly between multiple mechanisms. The logs suggest we're finally getting complete data into the system - we just need to solidify the synchronization between these three flows:


Initial query loading ‚úÖ

Mutation optimistic updates üõ†Ô∏è Fixed above

Realtime subscriptions üîó Enhanced dedupe