 You are updating the chat page to properly load assigned AI tutors for both solo and group conversations in Tomoshibi.

✅ Create two modular Supabase functions in lib/supabase/loaders.ts (or equivalent):

1. loadGroupPersonas(conversationId: string): Promise<Persona[]>
Fetches personas from the conversation_participants table.

Ordered by join_order.

Expands all needed persona fields (e.g. name, avatar, tone, prompt hint).

If no records found, logs a fallback warning.

ts
Copy
Edit
export async function loadGroupPersonas(conversationId: string) {
  const { data, error } = await supabase
    .from("conversation_participants")
    .select(`
      persona_id,
      join_order,
      personas:persona_id (
        id, name, avatar_url, speaking_style, tone, level, origin, system_prompt_hint
      )
    `)
    .eq("conversation_id", conversationId)
    .order("join_order", { ascending: true });

  if (error || !data) {
    console.error("⚠️ Failed to load group personas:", error);
    return [];
  }

  const loaded = data
    .filter((row) => row.personas)
    .map((row) => ({
      ...row.personas,
      join_order: row.join_order,
    }));

  console.log("🧠 Loaded group personas:", loaded.map(p => p.name));
  return loaded;
}
2. loadSoloPersona(conversationId: string): Promise<Persona | null>
Loads the persona from the conversation’s persona_id (for solo mode).

If no persona_id found, logs and returns null.

ts
Copy
Edit
export async function loadSoloPersona(conversationId: string) {
  const { data, error } = await supabase
    .from("conversations")
    .select(`
      persona_id,
      personas:persona_id (
        id, name, avatar_url, speaking_style, tone, level, origin, system_prompt_hint
      )
    `)
    .eq("id", conversationId)
    .single();

  if (error || !data?.personas) {
    console.warn("⚠️ Solo persona not found for conversation:", conversationId);
    return null;
  }

  console.log("🎙️ Loaded solo persona:", data.personas.name);
  return data.personas;
}
📦 Use in Chat Page
In your chat component:

ts
Copy
Edit
useEffect(() => {
  async function fetchPersonas() {
    let personas = [];

    if (conversation.mode === "group") {
      personas = await loadGroupPersonas(conversation.id);
    } else {
      const solo = await loadSoloPersona(conversation.id);
      if (solo) personas = [solo];
    }

    setConversationPersonas(personas);
  }

  if (conversation?.id) fetchPersonas();
}, [conversation]);