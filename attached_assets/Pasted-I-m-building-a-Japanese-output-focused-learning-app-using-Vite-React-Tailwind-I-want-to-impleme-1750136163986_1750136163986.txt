I'm building a Japanese output-focused learning app using Vite + React + Tailwind. I want to implement a scenario-based learning system that enhances and expands my current site functionality.

🔧 🔁 Requirements (Please read carefully):
These changes may modify, extend, or replace existing features, so:

⚠️ Do not break current vocab tracking, dashboard, or tutor UI

✅ Reuse existing components when appropriate

✅ Modularize new logic to keep separation of concerns

✅ If extending shared types (like VocabEntry, UserProgress), do so non-destructively

Follow consistent code naming conventions:

✅ Component names: PascalCase (e.g. ScenarioCard)

✅ Props and variables: camelCase

✅ File names: kebab-case

✅ Avoid redundant or vague names (e.g. use ScenarioHeader, not HeaderComponent)

Keep components concise, focused, and reusable

📚 Feature to Build: Scenario-Based Output Learning
1. ✅ Scenario Selection View
Display a set of real-world scenarios (e.g., “Order food”, “Introduce yourself”)

Each card should include:

Title, JLPT level, status (locked/completed/in-progress)

Click → navigates to scenario practice view

Scenario data should come from a JSON or supabase table

2. ✅ Scenario Practice View
Chat-based interface with AI tutor

User responds to a scenario prompt (e.g. "You enter a café...")

Tutor responds conversationally and:

Gives corrections, tips

Highlights vocab and grammar used

Tracks goal completion

Make this view modular and use existing chat/tutor components if available

3. ✅ Scenario Progress & Unlocking
Track in user state:

completedScenarios: string[]

vocabUsed: Record<string, number>

xp: number, badges: string[]

Unlock new scenarios or “checkpoint challenges” based on progress

Display progress map or checklist as an overlay (optional initially)

4. ✅ Tech Use & Architecture
React (functional components)

TailwindCSS + existing design tokens

Supabase if user is logged in; localStorage fallback otherwise

Modular scenario data (can be imported from static file or API)

🧠 Scenario JSON Example (use this as shape):
ts
Copy
Edit
{
  id: "cafe-ordering",
  title: "Ordering at a Café",
  level: "N5",
  prompt: "You enter a small café. Politely order a drink.",
  goals: ["Use ～をください", "Use 1 food word", "Use 1 greeting"],
  targetVocab: ["コーヒー", "パン", "ください", "こんにちは"]
}
✅ Make the code scalable and avoid hardcoding anything that will likely expand (like scenario content, tutor types, or XP logic).
✅ Be careful not to overwrite or break core app flows.
✅ Keep all changes in their own folder/module unless integration is necessary.

Deliverable: A working, non-breaking implementation of this system with modular, clean, scalable code. Use comments where helpful, and name everything clearly and consistently.