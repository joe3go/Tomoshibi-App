Japanese Conversation Learning Platform - Replit Agent Prompt
Build a complete Japanese learning platform focused on JLPT N5 conversation practice with persona-driven interactions. This should be a full-stack web application with the following specifications:
Technical Stack Requirements

Frontend: React.js with TypeScript for type safety
Backend: Node.js with Express.js
Database: PostgreSQL (Replit default)
Authentication: Simple email/password auth (JWT tokens)
Styling: Tailwind CSS for responsive design
AI Integration: OpenAI GPT-4 API for conversation handling

Database Schema Design
Create the following PostgreSQL tables:
sql-- Users table with simple auth
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    display_name VARCHAR(100),
    preferred_kanji_display VARCHAR(20) DEFAULT 'furigana', -- 'furigana', 'kanji_only'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Personas for different teaching styles
CREATE TABLE personas (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    type VARCHAR(20) NOT NULL, -- 'teacher', 'friend'
    jlpt_level VARCHAR(10) DEFAULT 'N5',
    description TEXT,
    system_prompt TEXT NOT NULL,
    personality_traits JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- JLPT N5 vocabulary reference
CREATE TABLE jlpt_vocab (
    id SERIAL PRIMARY KEY,
    kanji VARCHAR(50),
    hiragana VARCHAR(100) NOT NULL,
    romaji VARCHAR(100),
    english_meaning TEXT NOT NULL,
    jlpt_level VARCHAR(10) DEFAULT 'N5',
    word_type VARCHAR(20), -- 'noun', 'verb', 'adjective', etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- JLPT N5 grammar patterns
CREATE TABLE jlpt_grammar (
    id SERIAL PRIMARY KEY,
    pattern VARCHAR(100) NOT NULL,
    english_explanation TEXT NOT NULL,
    example_japanese TEXT,
    example_english TEXT,
    jlpt_level VARCHAR(10) DEFAULT 'N5',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Conversation scenarios
CREATE TABLE scenarios (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    jlpt_level VARCHAR(10) DEFAULT 'N5',
    initial_prompt TEXT NOT NULL,
    conversation_tree JSONB, -- Flexible tree structure for guided conversations
    target_vocab_ids INTEGER[], -- Array of vocab IDs this scenario focuses on
    target_grammar_ids INTEGER[], -- Array of grammar IDs this scenario uses
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User conversations
CREATE TABLE conversations (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    persona_id INTEGER REFERENCES personas(id),
    scenario_id INTEGER REFERENCES scenarios(id),
    phase VARCHAR(20) DEFAULT 'guided', -- 'guided', 'transitioning', 'open'
    status VARCHAR(20) DEFAULT 'active', -- 'active', 'completed', 'paused'
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP
);

-- Individual messages in conversations
CREATE TABLE messages (
    id SERIAL PRIMARY KEY,
    conversation_id INTEGER REFERENCES conversations(id),
    sender VARCHAR(10) NOT NULL, -- 'user', 'ai'
    content TEXT NOT NULL,
    feedback TEXT, -- AI feedback on user messages
    vocab_used INTEGER[], -- Array of vocab IDs used in this message
    grammar_used INTEGER[], -- Array of grammar IDs used in this message
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User progress tracking
CREATE TABLE user_progress (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    jlpt_level VARCHAR(10) DEFAULT 'N5',
    vocab_encountered INTEGER[] DEFAULT '{}', -- Array of vocab IDs user has seen
    vocab_mastered INTEGER[] DEFAULT '{}', -- Array of vocab IDs user has mastered
    grammar_encountered INTEGER[] DEFAULT '{}',
    grammar_mastered INTEGER[] DEFAULT '{}',
    total_conversations INTEGER DEFAULT 0,
    total_messages_sent INTEGER DEFAULT 0,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Core Features to Implement
1. Authentication System

Simple email/password registration and login
JWT token-based sessions
User profile management with kanji display preferences

2. Persona Management
Create 2 default personas:

Teacher Persona: Formal, patient, provides detailed explanations, uses polite Japanese
Friend Persona: Casual, encouraging, uses informal speech, more conversational

Each persona should have distinct system prompts that maintain consistency while adapting to different learning styles.
3. Conversation System

Guided Phase: AI follows conversation tree structure from scenarios
Flexible Branching: If user asks questions, AI handles naturally but guides back to learning objectives
Open Phase: Natural conversation while maintaining JLPT N5 vocabulary/grammar level
Feedback Integration: Before each AI response, provide brief feedback on user's previous message

4. Japanese Text Display

Furigana Support: Display kanji with hiragana readings above (default)
Kanji-Only Mode: User preference setting
Interactive Kanji: Clickable kanji that show vocabulary definitions (implement hover/click tooltips)

5. Scenario Management
Create 10 JLPT N5 scenarios with conversation trees:

Self-Introduction (自己紹介)
Ordering Food at Restaurant (レストランで注文)
Shopping for Clothes (服を買う)
Asking for Directions (道を聞く)
Talking About Family (家族について)
Daily Schedule (一日のスケジュール)
Weather Conversation (天気の話)
Hobbies Discussion (趣味について)
School/Work Talk (学校・仕事の話)
Making Weekend Plans (週末の予定)

Each scenario should include:

Initial conversation starter
3-5 guided exchange points
Natural transition to open conversation
Target vocabulary and grammar lists

6. Progress Tracking

Track vocabulary exposure and usage
Monitor grammar pattern recognition
Conversation completion rates
Learning analytics dashboard

AI Integration Requirements
OpenAI API Implementation

Use GPT-4 for conversation generation
Implement proper prompt engineering for persona consistency
Maintain conversation context across messages
Generate appropriate feedback for user inputs

Prompt Engineering Structure
System Prompt Template:
- Persona characteristics and teaching style
- JLPT N5 vocabulary/grammar constraints
- Conversation phase instructions
- Feedback generation guidelines
- Japanese text formatting requirements
Frontend Requirements
React Components Needed

Authentication: Login/Register forms
Dashboard: User progress overview, scenario selection
Chat Interface: Real-time conversation with typing indicators
Kanji Display: Furigana rendering and interactive tooltips
Settings: User preferences for text display and persona selection
Progress Tracking: Visual representation of learning analytics

UI/UX Specifications

Responsive design for mobile and desktop
Japanese text rendering with proper fonts
Clean, educational interface design
Real-time message updates
Loading states and error handling

Seed Data Requirements
Initial Data Population

Personas: Create the 2 default personas with detailed system prompts
JLPT N5 Vocabulary: Populate with essential N5 vocabulary (approximately 800 words)
JLPT N5 Grammar: Include basic grammar patterns (approximately 50 patterns)
Scenarios: Create all 10 scenarios with conversation trees
Sample User: Create a demo user for testing

Development Structure
File Organization
/
├── client/ (React frontend)
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── hooks/
│   │   ├── utils/
│   │   └── styles/
├── server/ (Node.js backend)
│   ├── routes/
│   ├── models/
│   ├── middleware/
│   ├── services/
│   └── utils/
├── database/
│   ├── migrations/
│   ├── seeds/
│   └── schema.sql
└── shared/
    └── types/
Implementation Priority
Phase 1 (MVP)

Database setup and migrations
Basic authentication system
Simple chat interface with one persona
3 core scenarios implementation
Basic progress tracking

Phase 2 (Enhancement)

Second persona integration
All 10 scenarios
Interactive kanji features
Comprehensive progress analytics
UI/UX improvements

Testing Requirements

Unit tests for API endpoints
Integration tests for conversation flow
Frontend component testing
Database query testing

Security Considerations

Password hashing with bcrypt
JWT token security
Input sanitization for chat messages
API rate limiting
Environment variable management for API keys

Environment Variables Needed
DATABASE_URL=postgresql://...
JWT_SECRET=your_jwt_secret
OPENAI_API_KEY=your_openai_key
PORT=3000
NODE_ENV=development
Please implement this complete system with all components working together. Focus on creating a solid foundation that can be extended later. Include proper error handling, logging, and documentation for all major functions.
The goal is to create an engaging, educational platform where users can practice Japanese conversation with AI personas while tracking their progress and learning JLPT N5 vocabulary and grammar naturally through guided conversations.